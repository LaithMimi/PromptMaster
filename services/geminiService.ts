
// Ensure the API key is available in the environment variables
if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const openAIFetch = async (endpoint: string, body: object) => {
  const response = await fetch(`https://api.openai.com/v1/${endpoint}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.API_KEY}`,
    },
    body: JSON.stringify(body),
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("OpenAI API Error:", errorData);
    throw new Error(errorData.error?.message || `Failed to fetch from OpenAI API endpoint: ${endpoint}`);
  }

  return response.json();
};

export const generateImage = async (prompt: string): Promise<string> => {
  try {
    const response = await openAIFetch('images/generations', {
      model: 'dall-e-3',
      prompt: prompt,
      n: 1,
      size: '1024x1024',
      response_format: 'b64_json',
    });

    if (response.data && response.data[0].b64_json) {
      return `data:image/png;base64,${response.data[0].b64_json}`;
    } else {
      throw new Error("No image was generated by OpenAI.");
    }
  } catch (error) {
    console.error("Error generating image with OpenAI:", error);
    throw new Error("Failed to generate image. Please try again.");
  }
};

const callChatCompletion = async (systemMessage: string, userMessage: string) => {
    const data = await openAIFetch('chat/completions', {
        model: 'gpt-4o-mini',
        messages: [
            { role: 'system', content: systemMessage },
            { role: 'user', content: userMessage }
        ],
        response_format: { type: 'json_object' },
    });
    return JSON.parse(data.choices[0].message.content);
};


export const scorePrompts = async (userPrompt: string, groundTruthPrompt: string): Promise<{ score: number; feedback: string }> => {
  const systemMessage = `You are a scoring assistant for a game called "Prompt Perfect". Evaluate the user's prompt against a ground-truth prompt based on semantic similarity, detail, and style. Provide a score from 0-100 and brief, constructive feedback (max 20 words). Respond ONLY with a valid JSON object with keys "score" (integer) and "feedback" (string).`;
  const userMessage = `Ground-Truth Prompt: "${groundTruthPrompt}"\nUser's Prompt: "${userPrompt}"`;
  
  try {
    const result = await callChatCompletion(systemMessage, userMessage);
    if (typeof result.score === 'number' && typeof result.feedback === 'string') {
        return result;
    } else {
        throw new Error("Invalid JSON structure received from scoring API.");
    }
  } catch (error) {
    console.error("Error scoring prompts with OpenAI:", error);
    return { score: Math.floor(Math.random() * 30) + 40, feedback: "Could not automatically score prompt." };
  }
};

export const getPromptSuggestions = async (groundTruthPrompt: string): Promise<string[]> => {
    const systemMessage = `You are a creative assistant for a game called "Prompt Perfect". Based on the provided prompt, generate exactly three creative, alternative prompt suggestions. They should be slightly different in style or detail. Respond ONLY with a valid JSON object with a single key "suggestions" which is an array of three strings.`;
    const userMessage = `Original Prompt: "${groundTruthPrompt}"`;

    try {
        const result = await callChatCompletion(systemMessage, userMessage);
        if (Array.isArray(result.suggestions) && result.suggestions.length > 0) {
            return result.suggestions.slice(0, 3);
        } else {
            throw new Error("Invalid JSON structure for suggestions.");
        }
    } catch (error) {
        console.error("Error getting prompt suggestions with OpenAI:", error);
        throw new Error("Failed to generate suggestions.");
    }
};

export const generateRandomTarget = async (): Promise<{ title: string; groundTruthPrompt: string }> => {
    const systemMessage = `You are a creative assistant for "Prompt Perfect". Generate a unique, imaginative concept for an image. Provide a short, catchy "title" (max 5 words) and a detailed "groundTruthPrompt" (at least 30 words) for a text-to-image model. Do not use the word 'photorealistic'. Respond ONLY with a valid JSON object with keys "title" and "groundTruthPrompt".`;
    const userMessage = `Generate a new target. Example themes: futuristic cities, mythical creatures, surreal landscapes, steampunk inventions, abstract art.`;

    try {
        const result = await callChatCompletion(systemMessage, userMessage);
        if (typeof result.title === 'string' && typeof result.groundTruthPrompt === 'string') {
            return result;
        } else {
            throw new Error("Invalid JSON structure received from target generation API.");
        }
    } catch (error) {
        console.error("Error generating random target with OpenAI:", error);
        throw new Error("Failed to generate a random target idea.");
    }
};
